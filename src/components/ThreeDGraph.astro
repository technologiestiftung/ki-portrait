---
---

<div id="threed-graph"></div>

<style>
  #threed-graph {
    position: fixed;
    width: 100vw;
    height: 100vh;
    top: 0;
    left: 0;
    z-index: -1;
  }
</style>

<script>
  import ForceGraph3D, { ForceGraph3DInstance } from "3d-force-graph";
  import * as THREE from "three";
  import { propertiesInOrderOfImportance } from "../../scripts/lib/parseFor3dGraph";

  const canvas = document.querySelector("#threed-graph") as HTMLCanvasElement;

  if (!canvas) {
    throw new Error("Canvas not found");
  }

  const NODE_SCALE = 12;

  async function main() {
    const data = await getGraphData();

    const graph = ForceGraph3D()(canvas);

    graph
      // @ts-ignore
      .nodeThreeObject(getImageRenderer(NODE_SCALE))
      .onNodeClick(getNodeClickHandler(graph))
      .linkVisibility(false)
      .backgroundColor("#ffffff")
      .graphData(data);

    graph.d3Force("link")?.strength(getStrengthAccessor(getMaxValue()));
  }

  async function getGraphData() {
    const data = await fetch("/eotai_images_extended_for_3d_graph.json");
    const json = await data.json();
    return json;
  }

  function getMaxValue() {
    const arr = Array.from(propertiesInOrderOfImportance.values());
    const totalReducer = (acc: number, curr: number) => acc + curr;
    return arr.reduce(totalReducer, 0) * 2;
  }

  function getStrengthAccessor(maxValue: number) {
    return (link: { value: number }) => 1 / link.value / maxValue;
  }

  function getImageRenderer(displayScale: number) {
    return ({ id }: { id: string }) => {
      const imgTexture = new THREE.TextureLoader().load(`/images/${id}.webp`);
      imgTexture.colorSpace = THREE.SRGBColorSpace;
      const material = new THREE.SpriteMaterial({ map: imgTexture });
      const sprite = new THREE.Sprite(material);
      sprite.scale.set(displayScale, displayScale, displayScale);
      return sprite;
    };
  }

  function getNodeClickHandler(graph: ForceGraph3DInstance) {
    return function onNodeClick(nd: object) {
      const node = nd as { x: number; y: number; z: number };
      const distance = 40;
      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);

      const newPos =
        node.x || node.y || node.z
          ? {
              x: node.x * distRatio,
              y: node.y * distRatio,
              z: node.z * distRatio,
            }
          : { x: 0, y: 0, z: distance };

      graph.cameraPosition(newPos, node, 1000);
    };
  }

  main();
</script>
