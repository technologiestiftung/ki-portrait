---
---

<div id="threed-graph"></div>

<style>
  #threed-graph {
    position: fixed;
    width: 100vw;
    height: 100vh;
    top: 0;
    left: 0;
    z-index: -1;
  }
</style>

<script>
  import ForceGraph3D from "3d-force-graph";
  import { initSettings, settingsMap } from "../utils/initSettings";
  import { getGraphData } from "../utils/dataUtil";
  import {
    getNodeClickHandler,
    getMaxStrength,
    getStrengthAccessor,
    getImageRenderer,
  } from "../utils/graphUtil";
  import type { PortraitWithCoordinates } from "../utils/graphUtil";
  import type { ParsedPortraitType } from "../../scripts/lib/parsePortraitData";
  import portraitState from "../utils/State";

  const canvas = document.querySelector("#threed-graph") as HTMLCanvasElement;

  if (!canvas) throw new Error("Canvas not found");

  const NODE_SCALE = 12;

  type ListenerType = (portrait: ParsedPortraitType | null) => void;
  type EventType = "onSelect";
  type ListenersType = Map<EventType, ListenerType[]>;
  class State {
    private selectedPortrait: ParsedPortraitType | null = null;
    private listeners: ListenersType = new Map();

    selectPortrait(portrait: ParsedPortraitType | null) {
      this.selectedPortrait = portrait;
      Object.entries(this.listeners)
        .filter(([key]) => key === "onSelect")
        .forEach(([_, listener]) => listener(portrait));
    }

    on(event: EventType, listener: ListenerType) {
      this.listeners.set(event, [
        ...(this.listeners.get(event) || []),
        listener,
      ]);
    }

    off(event: EventType, listener: ListenerType) {
      this.listeners.set(
        event,
        (this.listeners.get(event) || []).filter((l) => l !== listener)
      );
    }
  }

  async function main() {
    const data = await getGraphData();

    portraitState.onSelect((p) => console.log("select", p));
    portraitState.onDeselect(() => console.log("deselect"));

    const graph = ForceGraph3D()(canvas);
    const zoomClickHandler = getNodeClickHandler(graph);
    graph
      // @ts-ignore
      .nodeThreeObject(getImageRenderer(NODE_SCALE))
      .onNodeClick((nd) => {
        const node = nd as PortraitWithCoordinates;
        zoomClickHandler(node);
        portraitState.select(node);
      })
      .onBackgroundClick(() => {
        portraitState.deselect();
      })
      .linkVisibility(false)
      .backgroundColor("#ffffff")
      .showNavInfo(false)
      .graphData(data);

    const maxStrength = getMaxStrength(data.links, settingsMap);
    graph
      .d3Force("link")
      ?.strength(getStrengthAccessor(maxStrength, settingsMap));

    window.addEventListener("resize", () => {
      graph.width(window.innerWidth);
      graph.height(window.innerHeight);
    });

    initSettings((newPriorities) => {
      const maxStrength = getMaxStrength(data.links, newPriorities);
      const strengthAccessor = getStrengthAccessor(maxStrength, newPriorities);
      graph.d3Force("link")?.strength(strengthAccessor);

      graph.numDimensions(3);
    });
  }

  main();
</script>
