---
---

<div id="threed-graph"></div>

<style>
  #threed-graph {
    position: fixed;
    width: 100vw;
    height: 100vh;
    top: 0;
    left: 0;
    z-index: -1;
  }
</style>

<script>
  import ForceGraph3D from "3d-force-graph";
  import * as THREE from "three";
  import { propertiesInOrderOfImportance } from "../../scripts/lib/parseFor3dGraph";
  import { scaleLinear } from "d3-scale";

  const canvas = document.querySelector("#threed-graph") as HTMLCanvasElement;

  if (!canvas) {
    throw new Error("Canvas not found");
  }

  const NODE_SCALE = 12;

  async function main() {
    const data = await fetch("/eotai_images_extended_for_3d_graph.json").then(
      (res) => res.json()
    );

    const maxLinkValue =
      Array.from(propertiesInOrderOfImportance.values()).reduce(
        (acc, curr) => acc + curr,
        0
      ) * 2;

    const graph = ForceGraph3D()(canvas)
      // @ts-ignore
      .nodeThreeObject(({ id }) => {
        const imgTexture = new THREE.TextureLoader().load(`/images/${id}.webp`);
        imgTexture.colorSpace = THREE.SRGBColorSpace;
        const material = new THREE.SpriteMaterial({ map: imgTexture });
        const sprite = new THREE.Sprite(material);
        sprite.scale.set(NODE_SCALE, NODE_SCALE, NODE_SCALE);
        return sprite;
      })
      .onNodeClick(onNodeClick)
      .linkVisibility(false)
      .backgroundColor("#ffffff")
      .graphData(data);

    let originalStrengthAccessor = graph.d3Force("link")?.strength();
    originalStrengthAccessor =
      typeof originalStrengthAccessor === "function"
        ? originalStrengthAccessor
        : () => 1;

    graph.d3Force("link")?.strength((link: { value: number }) => {
      return 1 / link.value / maxLinkValue;
    });

    function onNodeClick(nd: object) {
      const node = nd as { x: number; y: number; z: number };
      const distance = 40;
      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);

      const newPos =
        node.x || node.y || node.z
          ? {
              x: node.x * distRatio,
              y: node.y * distRatio,
              z: node.z * distRatio,
            }
          : { x: 0, y: 0, z: distance };

      graph.cameraPosition(newPos, node, 1000);
    }
  }

  main();
</script>
